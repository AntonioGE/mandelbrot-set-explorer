
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.ByteArrayOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ANTONIO
 */
public class MandelbrotDisplay extends javax.swing.JPanel {

    /**
     * Creates new form MandelbrotDisplay
     */
    
    private final int width = 500, height = 500;
    private BufferedImage img;
    private byte[] pixels;
    
    double zoom = 0.01d;
    double radius = 4;
    private double xMouse, yMouse;
    public int maxIte = 75;
    private boolean dragging = false;
    private int lastX, lastY;
    
    public MandelbrotDisplay() {
        initComponents();
        
        img = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
        pixels = ((DataBufferByte) img.getRaster().getDataBuffer()).getData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (!dragging) {
            dragging = true;
            lastX = evt.getX();
            lastY = evt.getY();
        }

        xMouse += ((lastX - evt.getX())) * zoom;
        yMouse += ((lastY - evt.getY())) * zoom;

        lastX = evt.getX();
        lastY = evt.getY();

        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        double scaleSpeed = 1.1;
        if (evt.getWheelRotation() > 0) {
            zoom /= scaleSpeed;
        } else {
            zoom *= scaleSpeed;
        }
        repaint();
    }//GEN-LAST:event_formMouseWheelMoved

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        dragging = false;
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);

        double cX, cY, x, y, xTemp;
        double kx, ky;
        int ite;
        
        kx = xMouse - (width * zoom) / 2;
        ky = yMouse - (height * zoom) / 2;
        for(int i = 0, n = 0; i < height; i++){
            for(int j = 0; j < width; j++, n += 3){
                cX = j * zoom + kx;
                cY = i * zoom + ky;
                ite = maxIte;
                x = 0;
                y = 0;
                while (x * x + y * y < radius && ite > 0) {
                    xTemp = x * x - y * y + cX;
                    y = 2.0 * x * y + cY;
                    x = xTemp;
                    ite--;
                }
                if (ite > 0) {
                    pixels[n    ] = (byte)(((float)(ite)/maxIte)*255);
                    pixels[n + 1] = (byte)(((float)(ite)/maxIte)*255);
                    pixels[n + 2] = (byte)(((float)(ite)/maxIte)*255);
                } else {
                    pixels[n    ] = (byte)0;
                    pixels[n + 1] = (byte)0;
                    pixels[n + 2] = (byte)0;   
                }
            }
        }
        
        g.drawImage(img, 0, 0, null);
    }
    
    
}
